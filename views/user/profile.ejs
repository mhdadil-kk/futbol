<%- include('header') %>
    <style>
        .footer {
            margin-top: 100px;
            padding-top: 100px;
        }
    </style>

    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <button class="navbar-toggler mx-auto" type="button" data-toggle="collapse" data-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="#">Feed</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/orders">Orders</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Account</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Container -->
    <div class="container mt-4">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 mb-4">
                <div class="list-group">
                    <a href="#account-overview" class="list-group-item list-group-item-action active"
                        data-toggle="tab">Account Overview</a>

                    <a href="#address-book" class="list-group-item list-group-item-action" data-toggle="tab">Address
                        Book</a>
                    <a href="#logout" class="list-group-item list-group-item-action">Log Out</a>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9">
                <div class="tab-content">
                    <!-- Account Overview -->
                    <div class="tab-pane fade show active" id="account-overview">
                        <h2>Account Overview</h2>
                        <p>Feel free to edit any of your details below so your account is up to date.</p>

                        <div class="card mb-4">
                            <div class="card-header bg-primary text-white">
                                My Details
                            </div>
                            <div class="card-body">
                                <p class="card-text"><strong>Name:</strong>
                                    <%= user.name %>
                                </p>
                                <p class="card-text"><strong>Phone Number:</strong>
                                    <%= user.mobile %>
                                </p>
                                <p class="card-text"><strong>Email:</strong>
                                    <%= user.email %>
                                </p>
                                <!-- Button to trigger the modal -->
                                <button type="button" class="btn btn-primary" data-toggle="modal"
                                    data-target="#editProfileModal">
                                    Edit
                                </button>
                            </div>
                        </div>

                        <div class="container mt-5">
                            <div class="card mb-4">
                                <div class="card-header bg-success text-white">
                                    Wallet Balance
                                </div>
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h5 class="card-title">Current Balance</h5>
                                            <h2 class="text-primary">₹ <%= user.wallet_balance %></h2>
                                        </div>
                                        <button class="btn btn-primary" data-toggle="modal"
                                            data-target="#transactionHistoryModal">
                                            View Transaction History
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Transaction History Modal -->
                            <div class="modal fade" id="transactionHistoryModal" tabindex="-1"
                                aria-labelledby="transactionHistoryModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="transactionHistoryModalLabel">Transaction
                                                History</h5>
                                            <button type="button" class="close" data-dismiss="modal"
                                                aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <table class="table table-bordered table-hover">
                                                <thead class="table-success">
                                                    <tr>
                                                        <th>Date</th>
                                                        <th>Amount</th>
                                                        <th>Transaction Type</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% wallet.forEach(transaction=> { %>
                                                        <tr>
                                                            <td>
                                                                <%= new
                                                                    Date(transaction.createdAt).toLocaleDateString('en-US',
                                                                    { year: 'numeric' , month: 'long' , day: 'numeric'
                                                                    }) %>
                                                            </td>
                                                            <td>₹<%= transaction.amount %>
                                                            </td>
                                                            <td>
                                                                <%= transaction.payment_type %>
                                                            </td>
                                                        </tr>
                                                        <% }); %>
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary"
                                                data-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>



                        <!-- Bootstrap Modal for Editing Name, Phone Number, and Email -->
                        <div class="modal fade" id="editProfileModal" tabindex="-1" role="dialog"
                            aria-labelledby="editProfileModalLabel" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="editProfileModalLabel">Edit My Details</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <!-- Form to Edit Name, Phone, and Email -->
                                        <form action="/update-profile" method="POST" id="updateProfileForm" novalidate>
                                            <div class="form-group">
                                                <label for="name" class="form-label">Name</label>
                                                <input type="text" class="form-control" id="name" name="name"
                                                    value="<%= user.name %>">
                                                <span class="text-danger" id="nameError"></span>
                                            </div>
                                            <div class="form-group">
                                                <label for="phone" class="form-label">Phone Number</label>
                                                <input type="text" class="form-control" id="mobile" name="mobile"
                                                    value="<%= user.mobile %>">
                                                <div id="mobileError" class="text-danger"></div>
                                            </div>
                                            <div class="form-group">
                                                <label for="email" class="form-label">Email</label>
                                                <input type="email" class="form-control" id="email" name="email"
                                                    value="<%= user.email %>">
                                                <span class="text-danger" id="emailError"></span>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary"
                                                    data-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-primary">Save changes</button>
                                            </div>
                                        </form>

                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Address Book -->
                    <div class="tab-pane fade" id="address-book">
                        <h2>Address Book</h2>
                        <div class="card mb-4">
                            <div class="card-header bg-primary text-white">
                                Your Addresses
                            </div>
                            <div class="card-body">
                                <p>You have 5/5 address slots remaining.</p>
                                <button type="button" class="btn btn-primary" data-toggle="modal"
                                    data-target="#newAddressModal">Add New Address</button>
                                <!-- List of addresses -->
                                <ul class="list-group mt-4">
                                    <% addresses.forEach(function(address, index) { %>
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>
                                                    <%= address.name %>
                                                </strong><br>
                                                <%= address.streetAddress %>, <%= address.district %>, <%= address.state
                                                            %>, <%= address.country %> - <%= address.pinCode %><br>
                                                                    Mobile: <%= address.mobile %>
                                            </div>
                                            <div>
                                                <button class="btn btn-sm btn-secondary" data-toggle="modal"
                                                    data-target="#editAddressModal-<%= index %>">Edit</button>
                                                <button class="btn btn-sm btn-danger"
                                                    onclick="deleteAddress('<%= address._id %>')">Delete</button>
                                            </div>
                                        </li>

                                        <!-- Edit Address Modal -->
                                        <div class="modal fade" id="editAddressModal-<%= index %>" tabindex="-1"
                                            aria-labelledby="editAddressModalLabel-<%= index %>" aria-hidden="true">
                                            <div class="modal-dialog modal-lg">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="editAddressModalLabel-<%= index %>">
                                                            Edit Address</h5>
                                                        <button type="button" class="close" data-dismiss="modal"
                                                            aria-label="Close">
                                                            <span aria-hidden="true">&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <form id="editAddressForm-<%= index %>"
                                                            onsubmit="updateAddress(event, '<%= address._id %>')">
                                                            <div class="row">
                                                                <div class="col-md-6 mb-3">
                                                                    <label for="name" class="form-label">Name</label>
                                                                    <input type="text" class="form-control" id="edname"
                                                                        name="edname" value="<%= address.name %>">
                                                                    <span class="text-danger" id="ednameError"></span>
                                                                </div>
                                                                <div class="col-md-6 mb-3">
                                                                    <label for="streetAddress" class="form-label">Street
                                                                        Address</label>
                                                                    <input type="text" class="form-control"
                                                                        id="edstreetAddress" name="edstreetAddress"
                                                                        value="<%= address.streetAddress %>">
                                                                    <span class="text-danger"
                                                                        id="edstreetAddressError"></span>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-6 mb-3">
                                                                    <label for="country"
                                                                        class="form-label">Country</label>
                                                                    <input type="text" class="form-control"
                                                                        id="edcountry" name="edcountry"
                                                                        value="<%= address.country %>">
                                                                    <span class="text-danger"
                                                                        id="edcountryError"></span>
                                                                </div>
                                                                <div class="col-md-4 mb-3">
                                                                    <label for="state" class="form-label">State</label>
                                                                    <input type="text" class="form-control" id="edstate"
                                                                       name="edstate" value="<%= address.state %>">
                                                                    <span class="text-danger" id="edstateError"></span>
                                                                </div>
                                                                <div class="col-md-4 mb-3">
                                                                    <label for="district"
                                                                        class="form-label">District</label>
                                                                    <input type="text" class="form-control"
                                                                        id="eddistrict" name="eddistrict"
                                                                        value="<%= address.district %>">
                                                                    <span class="text-danger"
                                                                        id="eddistrictError"></span>
                                                                </div>
                                                                <div class="col-md-4 mb-3">
                                                                    <label for="pinCode" class="form-label">Pin
                                                                        Code</label>
                                                                    <input type="text" class="form-control"
                                                                        id="edpinCode" name="edpinCode"
                                                                        value="<%= address.pinCode %>">
                                                                    <span class="text-danger"
                                                                        id="edpinCodeError"></span>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-6 mb-3">
                                                                    <label for="mobile"
                                                                        class="form-label">Mobile</label>
                                                                    <input type="text" class="form-control"
                                                                        id="edmobile" name="edmobile"
                                                                        value="<%= address.mobile %>">
                                                                    <span class="text-danger" id="edmobileError"></span>
                                                                </div>
                                                            </div>
                                                            <div class="d-flex justify-content-end">
                                                                <button type="submit" class="btn btn-primary">Update
                                                                    Address</button>
                                                            </div>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                        <% }) %>
                                </ul>

                            </div>
                        </div>
                    </div>
                </div>

                <!-- Account Actions -->
                <div id="logout" class="d-flex justify-content-between mt-4">
                    <a href="#" onclick="logout()" class="btn btn-outline-danger">Log me out</a>
                </div>
            </div>
        </div>
    </div>
    </div>

    <!-- End of Container -->

    <!-- Modal for Adding New Address -->
    <div class="modal fade" id="newAddressModal" tabindex="-1" aria-labelledby="newAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newAddressModalLabel">Add New Address</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="newAddressForm" onsubmit="addAddress(event)">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" class="form-control" id="adname" name="adname"
                                    placeholder="John Doe">
                                <span class="text-danger" id="adnameError"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="streetAddress" class="form-label">Street Address</label>
                                <input type="text" class="form-control" id="adstreetAddress" name="adstreetAddress"
                                    placeholder="123 Main St">
                                <span class="text-danger" id="adstreetAddressError"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="country" class="form-label">Country</label>
                                <input type="text" class="form-control" id="adcountry" name="adcountry"
                                    placeholder="United States">
                                <span class="text-danger" id="adcountryError"></span>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="state" class="form-label">State</label>
                                <input type="text" class="form-control" id="adstate" name="adstate"
                                    placeholder="California">
                                <span class="text-danger" id="adstateError"></span>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="district" class="form-label">District</label>
                                <input type="text" class="form-control" id="addistrict" name="addistrict"
                                    placeholder="Los Angeles">
                                <span class="text-danger" id="addistrictError"></span>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="pinCode" class="form-label">Pin Code</label>
                                <input type="text" class="form-control" id="adpinCode" name="adpinCode"
                                    placeholder="90001">
                                <span class="text-danger" id="adpinCodeError"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="mobile" class="form-label">Mobile</label>
                                <input type="text" class="form-control" id="admobile" name="admobile"
                                    placeholder="+1 234 567 890">
                                <span class="text-danger" id="admobileError"></span>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary">Save Address</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>








    <script>
        async function addAddress(event) {
            event.preventDefault(); // Prevent the default form submission
            clearErrors(); // Clear previous errors
            let valid = true;

            const fields = [
                { id: 'adname', error: 'Name is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'Name can only contain letters and spaces.' },
                { id: 'adstreetAddress', error: 'Street Address is required.', regex: /^[a-zA-Z0-9\s]+$/, errorMessage: 'Street Address can only contain letters, numbers, and spaces.' },
                { id: 'adcountry', error: 'Country is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'Country can only contain letters and spaces.' },
                { id: 'adstate', error: 'State is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'State can only contain letters and spaces.' },
                { id: 'addistrict', error: 'District is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'District can only contain letters and spaces.' },
                { id: 'adpinCode', error: 'Pin Code is required.', regex: /^\d{6}$/, errorMessage: 'Pin Code must be 6 digits.' },
                { id: 'admobile', error: 'Mobile number is required.', regex: /^\d{10}$/, errorMessage: 'Mobile number must be 10 digits.' }
            ];

            fields.forEach(field => {
                const value = document.getElementById(field.id).value;

                console.log(`Validating ${field.id}: "${value}"`);

                // Check if the field is empty
                if (!value) {
                    showError(`${field.id}Error`, field.error);
                    console.log(`Error: ${field.error}`);
                    valid = false;
                }
                // Check for leading spaces
                else if (/^\s/.test(value)) {
                    showError(`${field.id}Error`, 'Field cannot start with a space.');
                    console.log(`Error: Field cannot start with a space`);
                    valid = false;
                }
                // Check if value matches the field-specific regex pattern
                else if (!field.regex.test(value)) {
                    showError(`${field.id}Error`, field.errorMessage);
                    console.log(`Error: ${field.errorMessage}`);
                    valid = false;
                }
            });

            if (valid) {
                // Proceed with form submission (assumes no errors)
                const formData = new FormData(event.target);
                const data = {
                    userId: '<%= user._id %>', // Include user ID
                    name: formData.get('adname'),
                    streetAddress: formData.get('adstreetAddress'),
                    state: formData.get('adstate'),
                    district: formData.get('addistrict'),
                    pinCode: formData.get('adpinCode'),
                    mobile: formData.get('admobile'),
                    country: formData.get('adcountry')
                };

                try {
                    const response = await fetch('/add_address', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Address saved successfully!',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload(); // Reload page to reflect changes
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to save address.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while saving the address.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        }



        async function updateAddress(event, addressId) {
            event.preventDefault();
            clearErrors(); // Clear previous errors
            let valid = true;

            const fields = [
                { id: 'edname', error: 'Name is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'Name can only contain letters and spaces.' },
                { id: 'edstreetAddress', error: 'Street Address is required.', regex: /^[a-zA-Z0-9\s]+$/, errorMessage: 'Street Address can only contain letters, numbers, and spaces.' },
                { id: 'edcountry', error: 'Country is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'Country can only contain letters and spaces.' },
                { id: 'edstate', error: 'State is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'State can only contain letters and spaces.' },
                { id: 'eddistrict', error: 'District is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'District can only contain letters and spaces.' },
                { id: 'edpinCode', error: 'Pin Code is required.', regex: /^\d{6}$/, errorMessage: 'Pin Code must be 6 digits.' },
                { id: 'edmobile', error: 'Mobile number is required.', regex: /^\d{10}$/, errorMessage: 'Mobile number must be 10 digits.' }
            ];

            fields.forEach(field => {
                const value = document.getElementById(field.id).value;

                console.log(`Validating ${field.id}: "${value}"`);

                // Check if the field is empty
                if (!value) {
                    showError(`${field.id}Error`, field.error);
                    console.log(`Error: ${field.error}`);
                    valid = false;
                }
                // Check for leading spaces
                else if (/^\s/.test(value)) {
                    showError(`${field.id}Error`, 'Field cannot start with a space.');
                    console.log(`Error: Field cannot start with a space`);
                    valid = false;
                }
                // Check if value matches the field-specific regex pattern
                else if (!field.regex.test(value)) {
                    showError(`${field.id}Error`, field.errorMessage);
                    console.log(`Error: ${field.errorMessage}`);
                    valid = false;
                }
            });

            // Mobile number validation (10 digits)
            const mobile = document.getElementById('edmobile').value;
            if (!/^\d{10}$/.test(mobile)) {
                showError('mobileError', 'Mobile number must be 10 digits.');
                valid = false;
            }

            // Pin code validation (6 digits)
            const pinCode = document.getElementById('edpinCode').value;
            if (!/^\d{6}$/.test(pinCode)) {
                showError('pinCodeError', 'Pin Code must be 6 digits.');
                valid = false;
            }

            if (valid) {
                const form = event.target;
                const formData = new FormData(form);

                const data = {
                    name: formData.get('edname'),
                    streetAddress: formData.get('edstreetAddress'),
                    state: formData.get('edstate'),
                    district: formData.get('eddistrict'),
                    pinCode: formData.get('edpinCode'),
                    mobile: formData.get('edmobile'),
                    country: formData.get('edcountry')
                };

                try {
                    const response = await fetch(`/updateAddress/${addressId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        location.reload(); // Refresh the page to show updated address
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to update address.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while updating the address.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const editProfileForm = document.getElementById('updateProfileForm');
            if (editProfileForm) {
                editProfileForm.addEventListener('submit', async function (event) {
                    event.preventDefault(); // Prevent default form submission
                    clearErrors(); // Clear previous errors

                    let valid = true;

                    const profileFields = [
                        { id: 'name', error: 'Name is required.', regex: /^[a-zA-Z\s]+$/, errorMessage: 'Name can only contain letters and spaces.' },
                        { id: 'mobile', error: 'Mobile number is required.', regex: /^\d{10}$/, errorMessage: 'Mobile number must be 10 digits.' },
                        { id: 'email', error: 'Email is required.', regex: /^\S+@\S+\.\S+$/, errorMessage: 'Please enter a valid email address.' }
                    ];

                    profileFields.forEach(field => {
                        const inputElement = document.getElementById(field.id);
                        const value = inputElement ? inputElement.value.trim() : '';

                        // Check if the field is empty
                        if (!value) {
                            showError(`${field.id}Error`, field.error);
                            valid = false;
                        }
                        // Check for continuous repeated characters
                        else if (/(\w)\1{2,}/.test(value)) {
                            showError(`${field.id}Error`, 'Field cannot contain continuous repeated characters (e.g., aaa).');
                            valid = false;
                        }
                        // Check for special characters
                        else if (/[^a-zA-Z0-9\s]/.test(!value == 'email')) {
                            showError(`${field.id}Error`, 'Field cannot contain special characters like @, =, +, $, etc.');
                            valid = false;
                        }
                        // Check if the value matches the field-specific regex pattern
                        else if (field.regex && !field.regex.test(value)) {
                            showError(`${field.id}Error`, field.errorMessage);
                            valid = false;
                        }
                    });

                    // Perform additional checks if needed
                    // For instance, mobile number validation is already part of `profileFields`
                    // You can add more checks if you want additional validations

                    if (valid) {
                        const formData = new FormData(this);
                        const data = {
                            name: formData.get('name'),
                            email: formData.get('email'),
                            mobile: formData.get('mobile'),
                            // Add more fields if necessary
                        };

                        try {
                            const response = await fetch('/update-profile', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(data)
                            });

                            if (response.ok) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Profile updated successfully!',
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                });
                            } else {
                                const errorData = await response.json();
                                Swal.fire({
                                    title: 'Error!',
                                    text: errorData.message || 'Failed to update profile.',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred while updating the profile.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    }
                });
            }
        });


        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.innerText = message;
            } else {
                console.error(`Element with ID ${elementId} not found.`);
            }
        }

        // Function to clear all previous error messages
        function clearErrors() {
            document.querySelectorAll('.text-danger').forEach(span => span.innerText = '');
        }

        async function deleteAddress(addressId) {
            try {
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                });

                console.log(result);  // Debugging purpose

                if (result.isConfirmed) {
                    // Correcting the fetch URL syntax
                    const response = await fetch(`/delete_address?id=${addressId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'Your address has been deleted.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload(); // Reload page to reflect changes
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to delete address.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while deleting the address.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }



        function logout() {
            Swal.fire({
                title: "Are you sure?",
                text: "You will be logged out of your account!",
                icon: "warning",
                showCancelButton: true, // Shows a cancel button
                confirmButtonColor: "#3085d6", // Customize confirm button color
                cancelButtonColor: "#d33", // Customize cancel button color
                confirmButtonText: "Yes, log me out!", // Customize confirm button text
                cancelButtonText: "No, stay logged in" // Customize cancel button text
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with your logout logic here
                    // For example, redirecting to the logout route
                    window.location.href = '/logout'; // Update with your logout URL
                }
            });
        }


    </script>


    <%- include('footer') %>