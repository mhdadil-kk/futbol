<%- include('adheader') %>
<link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet" />
<style>
    .cropper-container {
        width: 100%;
        max-height: 400px;
        margin-bottom: 10px;
    }

    .modal-content {
        margin: 10% auto;
        padding: 20px;
        width: 80%;
        max-width: 600px;
        background-color: #363636;
    }

    .image-preview {
        width: 100px; /* Adjust preview size as needed */
        height: auto;
        margin-top: 10px;
    }

    #cropperModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }
</style>
<script src="https://unpkg.com/cropperjs"></script>
<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header text-center">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-8 mx-auto">
            <div class="card mb-4">
                <div class="card-header text-center">
                    <h4>Basic Information</h4>
                </div>
                <div class="card-body">
                    <form id="productForm" action="/admin/addproducts" method="POST" enctype="multipart/form-data" novalidate onsubmit="return validateProductForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" required />
                            <div class="error-message text-danger" id="nameError"></div> <!-- Error message -->
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" name="description" class="form-control" rows="4" required></textarea>
                            <div class="error-message text-danger" id="descriptionError"></div> <!-- Error message -->
                        </div>
                        <div class="row">
                            <div class="col-lg-6 mb-4">
                                <label class="form-label">Price</label>
                                <input placeholder="â‚¹" name="price" type="number" class="form-control" required />
                                <div class="error-message text-danger" id="priceError"></div> <!-- Error message -->
                            </div>
                            <div class="col-lg-6 mb-4">
                                <label class="form-label">Stock</label>
                                <input type="number" name="stock" class="form-control" required />
                                <div class="error-message text-danger" id="stockError"></div> <!-- Error message -->
                            </div>
                        </div>
                    
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-12 mb-3">
                                        <label class="form-label">Category</label>
                                        <select name="category" class="form-select" required>
                                            <% if (categories && categories.length > 0) { %>
                                                <% categories.forEach((category) => { %>
                                                    <option value="<%= category._id %>">
                                                        <%= category.name %>
                                                    </option>
                                                <% }) %>
                                            <% } %>
                                        </select>
                                        <div class="error-message text-danger" id="categoryError"></div> <!-- Error message -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="card mb-4">
                            <div class="card-header text-center">
                                <h4>Media</h4>
                            </div>
                            <div class="card-body">
                                <div class="input-upload text-center">
                                    <input name="images" class="form-control mt-3" type="file" id="productImages" accept="image/*" multiple />
                                    <div class="error-message text-danger" id="imageError"></div> <!-- Error message -->
                                </div>
                                <div id="imagePreviews" class="text-center"></div> <!-- Image previews container -->
                            </div>
                    
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary btn-md rounded font-sm hover-up">Upload</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<%- include('adfooter') %>

<!-- Modal for cropping -->
<div id="cropperModal" class="modal">
    <div class="modal-content">
        <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image for cropping" />
        </div>
        <button onclick="cropImage()">Crop</button>
        <button onclick="closeModal()">Cancel</button>
    </div>
</div>
<script>
function validateProductForm() {
    const name = document.getElementById('product_name').value;
    const description = document.querySelector('textarea[name="description"]').value;
    const price = document.querySelector('input[name="price"]').value;
    const stock = document.querySelector('input[name="stock"]').value;
    const category = document.querySelector('select[name="category"]').value;

    // Error message elements
    const nameError = document.getElementById('nameError');
    const descriptionError = document.getElementById('descriptionError');
    const priceError = document.getElementById('priceError');
    const stockError = document.getElementById('stockError');
    const categoryError = document.getElementById('categoryError');
    const imageError = document.getElementById('imageError');

    // Reset previous error messages
    nameError.textContent = '';
    descriptionError.textContent = '';
    priceError.textContent = '';
    stockError.textContent = '';
    categoryError.textContent = '';
    imageError.textContent = '';

    // Regular expression to check for special characters
    const specialCharPattern = /[!@#$%^&*(),.?":{}|<>+=-]/;
    // Regular expression to check for multiple spaces
    const multipleSpacesPattern = /\s{2,}/;

    // Validate product name
    if (name.trim() === '') {
        nameError.textContent = 'Please enter a product name. This field cannot be empty.';
        return false;
    }
    if (multipleSpacesPattern.test(name)) {
        nameError.textContent = 'The product name cannot contain consecutive spaces. Please correct this.';
        return false;
    }
    if (name.length < 3) {
        nameError.textContent = 'The product name must be at least 3 characters long. Please provide a longer name.';
        return false;
    }
    if (name.length > 50) {
        nameError.textContent = 'The product name cannot exceed 50 characters. Please shorten the name.';
        return false;
    }
    if (specialCharPattern.test(name)) {
        nameError.textContent = 'The product name cannot contain special characters (e.g., !@#$%^&*). Please use only letters and numbers.';
        return false;
    }

    // Validate description
  
    if (multipleSpacesPattern.test(description)) {
        descriptionError.textContent = 'The description cannot contain consecutive spaces. Please correct this.';
        return false;
    }
    if (description.length < 10) {
        descriptionError.textContent = 'The description must be at least 10 characters long. Please provide more detail.';
        return false;
    }
    if (description.length > 200) {
        descriptionError.textContent = 'The description cannot exceed 200 characters. Please shorten your description.';
        return false;
    }
    if (specialCharPattern.test(description)) {
        descriptionError.textContent = 'The description cannot contain special characters (e.g., !@#$%^&*). Please use only letters and numbers.';
        return false;
    }

    // Validate price
    if (price === '') {
        priceError.textContent = 'Please enter a price. This field cannot be empty.';
        return false;
    }
    if (Number(price) <= 0) {
        priceError.textContent = 'The price must be a positive number.';
        return false;
    }

    // Validate stock
    if (stock === '') {
        stockError.textContent = 'Please enter stock. This field cannot be empty.';
        return false;
    }
    if (Number(stock) < 0) {
        stockError.textContent = 'Stock cannot be negative.';
        return false;
    }

    // Validate category
    if (category === '') {
        categoryError.textContent = 'Please select a category.';
        return false;
    }

    // Validate images
    const images = document.getElementById('productImages').files;
    if (images.length !== 4) { // Check if exactly 4 images are uploaded
        imageError.textContent = 'Please upload exactly 4 images.';
        return false;
    }

    // Check file types
    const allowedTypes = ['image/jpeg', 'image/png'];
    for (let i = 0; i < images.length; i++) {
        const file = images[i]; // Access the file directly
        if (!allowedTypes.includes(file.type)) {
            imageError.textContent = 'Only JPG and PNG images are allowed.';
            return false; // Prevent further checks on the next files if one is invalid
        }
    }

    return true; // Form is valid
}

let cropper;
let currentFileIndex = 0; // To track the current file being processed
let imageFiles = []; // To store all selected files
let dataTransfer = new DataTransfer(); // This will store the cropped files for input

function handleImageUploads(event) {
    const input = event.target;
    imageFiles = Array.from(input.files); // Convert FileList to Array

    // Limit the number of images to 4
    if (imageFiles.length > 4) {
        alert("You can only upload a maximum of 4 images.");
        imageFiles = imageFiles.slice(0, 4); // Keep only the first 4 images
        input.value = ''; // Clear the input
    }
    console.log('Selected files:', imageFiles); // Log selected files for debugging

    currentFileIndex = 0; // Reset index for new uploads
    if (imageFiles.length > 0) {
        openCropper(imageFiles[currentFileIndex]);
    }
}

function openCropper(file) {
    const reader = new FileReader();
    reader.onload = function (event) {
        const cropperImage = document.getElementById('cropperImage');
        cropperImage.src = event.target.result;

        // Show the cropper modal
        document.getElementById('cropperModal').style.display = 'block';

        // Initialize Cropper
        cropper = new Cropper(cropperImage, {
            aspectRatio: 1, 
            viewMode: 1,
        });
    };
    reader.readAsDataURL(file);
}

function cropImage() {
    const canvas = cropper.getCroppedCanvas();
    canvas.toBlob(function (blob) {
        // Create a new File from the blob
        const croppedFile = new File([blob], imageFiles[currentFileIndex].name, { type: imageFiles[currentFileIndex].type });

        // Append the cropped file to the dataTransfer object
        dataTransfer.items.add(croppedFile);

        // Display the cropped image preview
        const imagePreviewContainer = document.getElementById('imagePreviews');
        const imgElement = document.createElement('img');
        imgElement.src = URL.createObjectURL(croppedFile);
        imgElement.className = 'image-preview';
        imagePreviewContainer.appendChild(imgElement); // Append the preview image to the container

        // Close the cropper modal
        closeModal();

        // Move to the next image if available
        currentFileIndex++;
        if (currentFileIndex < imageFiles.length) {
            openCropper(imageFiles[currentFileIndex]);
        } else {
            // All images have been processed, update the input with the cropped files
            const productImagesInput = document.getElementById('productImages');
            productImagesInput.files = dataTransfer.files; // Update the input file list
        }
    }, 'image/jpeg'); // Change format as needed
}

function closeModal() {
    document.getElementById('cropperModal').style.display = 'none'; // Hide the modal
    if (cropper) {
        cropper.destroy(); // Destroy the cropper instance
        cropper = null; // Reset the cropper variable
    }
}

// Attach the event listener for file uploads
document.getElementById('productImages').addEventListener('change', handleImageUploads);
</script>
