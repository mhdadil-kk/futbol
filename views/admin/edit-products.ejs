<%- include('adheader') %>
<link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet" />
<style>
    .cropper-container {
        width: 100%;
        max-height: 400px;
        margin-bottom: 10px;
    }

    .modal-content {
        margin: 10% auto;
        padding: 20px;
        width: 80%;
        max-width: 600px;
        background-color: #363636;
    }

    .image-preview {
        width: 100px;
        height: auto;
        margin-top: 10px;
        position: relative;
        display: inline-block;
        margin-right: 10px;
    }

    .delete-image {
        position: absolute;
        top: 0;
        right: 0;
        background: red;
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        font-size: 14px;
        padding: 2px 6px;
        margin: 5px;
    }

    .preview-container {
        display: flex;
        flex-wrap: wrap;
    }

    /* Custom styles for SweetAlert */
    .swal2-popup {
        background-color: #000 !important; /* Black background */
        border-radius: 5px; /* Optional: round corners */
        width: 300px; /* Adjust width for small size */
        padding: 20px; /* Optional: add some padding */
    }

    .swal2-title,
    .swal2-html {
        color: #fff !important; /* White text for contrast */
    }

    .swal2-confirm,
    .swal2-cancel {
        background-color: #444 !important; /* Dark button background */
        color: #fff !important; /* White text on buttons */
    }
    
</style>
<script src="https://unpkg.com/cropperjs"></script>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header text-center">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-8 mx-auto">
            <div class="card mb-4">
                <div class="card-header text-center">
                    <h4>Basic Information</h4>
                </div>
                <div class="card-body">
                    <form id="editProductForm" novalidate onsubmit="return validateEditProductForm()">
                        <input type="hidden" name="_method" value="PUT">
                        
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="name" value="<%= product.name %>" placeholder="Type here" class="form-control" id="product_name" required />
                            <span class="text-danger" id="nameError"></span>
                        </div>
                    
                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" name="description" class="form-control" rows="4" required><%= product.description %></textarea>
                            <span class="text-danger" id="descriptionError"></span>
                        </div>
                    
                        <div class="row">
                            <div class="col-lg-6 mb-4">
                                <label class="form-label">Price</label>
                                <input placeholder="â‚¹" name="price" type="number" value="<%= product.price %>" class="form-control" required min="0" />
                                <span class="text-danger" id="priceError"></span>
                            </div>
                            <div class="col-lg-6 mb-4">
                                <label class="form-label">Stock</label>
                                <input type="number" name="stock" value="<%= product.stock %>" class="form-control" required min="0" />
                                <span class="text-danger" id="stockError"></span>
                            </div>
                        </div>
                    
                        <div class="card mb-4">
                            <div class="card-header text-center">
                                <h4>Organization</h4>
                            </div>
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-12 mb-3">
                                        <label class="form-label">Category</label>
                                        <select name="category" class="form-select" required>
                                            <% if (categories && categories.length > 0) { %>
                                                <% categories.forEach((category) => { %>
                                                    <option value="<%= category._id %>" <%= product.category.name && product.category._id.toString() === category._id.toString() ? 'selected' : '' %>>
                                                        <%= category.name %>
                                                    </option>
                                                <% }) %>
                                            <% } %>
                                        </select>
                                        <span class="text-danger" id="categoryError"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="card mb-4">
                            <div class="card-header text-center">
                                <h4>Media</h4>
                            </div>
                            <div class="card-body">
                                <div class="input-upload text-center">
                                    <div id="imagePreviews" class="preview-container">
                                        <% if (product.images && product.images.length > 0) { %>
                                            <% product.images.forEach((image, index) => { %>
                                                <div class="image-preview">
                                                    <img src="/uploads/<%= image %>" alt="Product Image" />
                                                    <button type="button" class="delete-image" onclick="deleteImage('<%= image %>', '<%= index %>')">X</button>
                                                </div>
                                            <% }) %>
                                        <% } %>
                                    </div>
                                    <input name="images" class="form-control mt-3" type="file" id="productImages" accept="image/*" multiple onchange="handleImageUploads(event)" />
                                    <span class="text-danger" id="imagesError"></span>
                                </div>
                            </div>
                    
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary btn-md rounded font-sm hover-up">Update</button>
                            </div>
                        </div>
                    </form>
                    
                </div>
            </div>
        </div>
    </div>
</section>

<%- include('adfooter') %>

<!-- Modal for cropping -->
<div id="cropperModal" class="modal">
    <div class="modal-content">
        <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image for cropping" />
        </div>
        <button onclick="cropImage()">Crop</button>
        <button onclick="closeModal()">Cancel</button>
    </div>
</div>


<!-- Include SweetAlert CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>

<script>

function validateEditProductForm() { 
    const name = document.getElementById('product_name').value;
    const description = document.querySelector('textarea[name="description"]').value;
    const price = document.querySelector('input[name="price"]').value;
    const stock = document.querySelector('input[name="stock"]').value;
    const category = document.querySelector('select[name="category"]').value;

    // Error message elements
    const nameError = document.getElementById('nameError');
    const descriptionError = document.getElementById('descriptionError');
    const priceError = document.getElementById('priceError');
    const stockError = document.getElementById('stockError');
    const categoryError = document.getElementById('categoryError');
    const imageError = document.getElementById('imagesError'); // Corrected ID for imageError

    // Reset previous error messages
    nameError.textContent = '';
    descriptionError.textContent = '';
    priceError.textContent = '';
    stockError.textContent = '';
    categoryError.textContent = '';
    imageError.textContent = '';

    // Regular expression to check for special characters
    const specialCharPattern = /[!@#$%^&*(),.?":{}|<>+=-]/;
    const multipleSpacesPattern = /\s{2,}/;

    let isValid = true; // To track overall validity

    // Validate product name
    if (name.trim() === '') {
        nameError.textContent = 'Please enter a product name. This field cannot be empty.';
        isValid = false;
    }
    if (multipleSpacesPattern.test(name)) {
        nameError.textContent = 'The product name cannot contain consecutive spaces. Please correct this.';
        isValid = false;
    }
    if (name.length < 3) {
        nameError.textContent = 'The product name must be at least 3 characters long. Please provide a longer name.';
        isValid = false;
    }
    if (name.length > 50) {
        nameError.textContent = 'The product name cannot exceed 50 characters. Please shorten the name.';
        isValid = false;
    }
    if (specialCharPattern.test(name)) {
        nameError.textContent = 'The product name cannot contain special characters (e.g., !@#$%^&*). Please use only letters and numbers.';
        isValid = false;
    }

    // Validate description
    if (multipleSpacesPattern.test(description)) {
        descriptionError.textContent = 'The description cannot contain consecutive spaces. Please correct this.';
        isValid = false;
    }
    if (description.length < 10) {
        descriptionError.textContent = 'The description must be at least 10 characters long. Please provide more detail.';
        isValid = false;
    }
    if (description.length > 200) {
        descriptionError.textContent = 'The description cannot exceed 200 characters. Please shorten your description.';
        isValid = false;
    }
    if (specialCharPattern.test(description)) {
        descriptionError.textContent = 'The description cannot contain special characters (e.g., !@#$%^&*). Please use only letters and numbers.';
        isValid = false;
    }

    // Validate price
    if (price === '') {
        priceError.textContent = 'Please enter a price. This field cannot be empty.';
        isValid = false;
    } else if (Number(price) <= 0) {
        priceError.textContent = 'The price must be a positive number.';
        isValid = false;
    }

    // Validate stock
    if (stock === '') {
        stockError.textContent = 'Please enter stock. This field cannot be empty.';
        isValid = false;
    } else if (Number(stock) < 0) {
        stockError.textContent = 'Stock cannot be negative.';
        isValid = false;
    }

    // Validate category
    if (category === '') {
        categoryError.textContent = 'Please select a category.';
        isValid = false;
    }

    // Validate images
    const images = document.getElementById('productImages').files;
    if (images.length !== 4) { // Check if exactly 4 images are uploaded
        imageError.textContent = 'Please upload exactly 4 images.';
        isValid = false;
    } else {
        // Check file types
        const allowedTypes = ['image/jpeg', 'image/png'];
        for (let i = 0; i < images.length; i++) {
            const file = images[i]; // Access the file directly
            if (!allowedTypes.includes(file.type)) {
                imageError.textContent = 'Only JPG and PNG images are allowed.';
                isValid = false; // Prevent further checks on the next files if one is invalid
                break; // Exit the loop on first invalid file type
            }
        }
    }

    return isValid; // Return overall validity
}



    let cropper;
    let currentFileIndex = 0; // To track the current file being processed
    let imageFiles = []; // To store all cropped files
    let deletedImages = []; // To track deleted images

    function handleImageUploads(event) {
        const input = event.target;
        const existingImageCount = document.querySelectorAll('#imagePreviews .image-preview').length;
        if (input.files.length + existingImageCount > 5) {
            Swal.fire({
                icon: 'warning',
                title: 'Warning!',
                text: 'You can only upload up to 5 images.',
            });
            return;
        }
        const files = Array.from(input.files); // Convert FileList to Array
        processFilesForCropping(files);
    }

    function processFilesForCropping(files) {
        const reader = new FileReader();

        reader.onload = function (e) {
            const cropperImage = document.getElementById('cropperImage');
            cropperImage.src = e.target.result;
            document.getElementById('cropperModal').style.display = 'block';
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(cropperImage, {
                aspectRatio: 4 / 4, // Portrait aspect ratio
                viewMode: 1,
            });
        };

        // Process the first file
        reader.readAsDataURL(files[currentFileIndex]);
    }

    function cropImage() {
        if (cropper) {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob((blob) => {
                const fileName = `cropped_${Date.now()}.png`;
                const newFile = new File([blob], fileName, { type: 'image/png' });
                imageFiles.push(newFile);
                const imgElement = document.createElement('img');
                imgElement.src = URL.createObjectURL(newFile);
                imgElement.alt = 'Cropped Image';
                imgElement.className = 'image-preview';
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'X';
                deleteButton.className = 'delete-image';
                deleteButton.onclick = () => deleteImage(fileName, currentFileIndex);
                const previewContainer = document.getElementById('imagePreviews');
                const newPreview = document.createElement('div');
                newPreview.className = 'image-preview';
                newPreview.appendChild(imgElement);
                newPreview.appendChild(deleteButton);
                previewContainer.appendChild(newPreview);
            });

            currentFileIndex++;
            if (currentFileIndex < imageFiles.length) {
                processFilesForCropping(imageFiles); // Process the next file
            } else {
                // All files processed
                document.getElementById('cropperModal').style.display = 'none';
                cropper.destroy();
                cropper = null;
            }
        }
    }

    function deleteImage(image, index) {
        Swal.fire({
            title: "Are you sure?",
            text: "You will not be able to recover this image!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, cancel!",
            dangerMode: true,
        }).then((result) => {
            if (result.isConfirmed) {
                const previewContainer = document.getElementById('imagePreviews');
                previewContainer.removeChild(previewContainer.children[index]);
                deletedImages.push(image); // Add to deleted images array
                document.getElementById('productImages').value = ""; // Clear input for new uploads
                Swal.fire("Deleted!", "Your image has been deleted.", "success");
            } else {
                Swal.fire("Cancelled", "Your image is safe :)", "error");
            }
        });
    }

    // Form submission with fetch
    document.getElementById('editProductForm').onsubmit = async function (event) {
        event.preventDefault()
 
        const formData = new FormData(this); // Create a new FormData object from the form
        const deletedImagesInput = document.createElement('input');
        deletedImagesInput.type = 'hidden';
        deletedImagesInput.name = 'deletedImages';
        deletedImagesInput.value = deletedImages.join(',');
        formData.append('deletedImages', deletedImagesInput.value);

        imageFiles.forEach((file) => {
            formData.append('images', file);
        });

        console.log(this.action); // Log action URL
        console.log(formData); // Log FormData

        try {
            const response = await fetch(this.action, {
                method: 'POST',
                body: formData,
            });

            console.log(response); // Log response

            if (response.ok) {
                await Swal.fire({
                    title: 'Success!',
                    text: 'Product updated successfully!',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
                window.location.href = '/admin/products'; // Redirect or handle success
            } else {
                await Swal.fire({
                    title: 'Error!',
                    text: 'Failed to update product.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                title: 'Error!',
                text: 'An error occurred while updating the product.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    };

    function closeModal() {
        document.getElementById('cropperModal').style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    }
</script>